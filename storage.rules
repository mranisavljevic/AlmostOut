rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Shopping list images - organized by list and item
    match /shopping-lists/{listId}/items/{itemId}/images/{imageId} {
      // Allow read if user is member of the list
      allow read: if request.auth != null 
        && request.auth.uid in firestore.get(/databases/(default)/documents/lists/$(listId)).data.members.keys();
      
      // Allow write if user is editor/owner of the list and file is under size limit
      allow write: if request.auth != null 
        && request.auth.uid in firestore.get(/databases/(default)/documents/lists/$(listId)).data.members.keys()
        && (firestore.get(/databases/(default)/documents/lists/$(listId)).data.members[request.auth.uid].role == 'owner'
            || firestore.get(/databases/(default)/documents/lists/$(listId)).data.members[request.auth.uid].role == 'editor')
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
      
      // Allow delete for owners, editors, or the user who uploaded the image
      allow delete: if request.auth != null 
        && request.auth.uid in firestore.get(/databases/(default)/documents/lists/$(listId)).data.members.keys()
        && (firestore.get(/databases/(default)/documents/lists/$(listId)).data.members[request.auth.uid].role == 'owner'
            || firestore.get(/databases/(default)/documents/lists/$(listId)).data.members[request.auth.uid].role == 'editor');
    }
    
    // User profile images (future feature)
    match /users/{userId}/profile/{imageId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 2 * 1024 * 1024; // 2MB limit for profile images
    }
  }
}