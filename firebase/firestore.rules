rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Lists - users can only access lists they're members of
    match /lists/{listId} {
      allow read: if request.auth != null 
        && request.auth.uid in resource.data.memberIds;
      
      allow create: if request.auth != null;
      
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.memberIds
        && (resource.data.memberDetails[request.auth.uid].role == 'owner' 
            || resource.data.memberDetails[request.auth.uid].role == 'editor');
      
      allow delete: if request.auth != null 
        && request.auth.uid in resource.data.memberIds
        && resource.data.memberDetails[request.auth.uid].role == 'owner';
      
      // List items subcollection
      match /items/{itemId} {
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/lists/$(listId)).data.memberIds;
        
        allow create, update: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/lists/$(listId)).data.memberIds
          && (get(/databases/$(database)/documents/lists/$(listId)).data.memberDetails[request.auth.uid].role == 'owner'
              || get(/databases/$(database)/documents/lists/$(listId)).data.memberDetails[request.auth.uid].role == 'editor');
        
        allow delete: if request.auth != null 
          && (request.auth.uid in get(/databases/$(database)/documents/lists/$(listId)).data.memberIds
              && (get(/databases/$(database)/documents/lists/$(listId)).data.memberDetails[request.auth.uid].role == 'owner'
                  || get(/databases/$(database)/documents/lists/$(listId)).data.memberDetails[request.auth.uid].role == 'editor'
                  || request.auth.uid == resource.data.addedBy));
      }
      
      // Activity subcollection - read only
      match /activity/{activityId} {
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/lists/$(listId)).data.memberIds;
      }
    }
    
    // Categories - global readable, user/list specific writable
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      
      allow create, update: if request.auth != null 
        && (resource.data.scope == 'user' && request.auth.uid == resource.data.createdBy)
        || (resource.data.scope == 'list' && request.auth.uid in get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.members.keys());
    }
    
    // User templates - users can only access their own
    match /users/{userId}/templates/{templateId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Invitations
    match /invitations/{invitationId} {
      allow read: if request.auth != null 
        && (request.auth.uid == resource.data.invitedBy 
            || request.auth.email == resource.data.invitedEmail);
      
      allow create: if request.auth != null;
      
      allow update: if request.auth != null 
        && request.auth.email == resource.data.invitedEmail;
    }
  }
}